name: Helpm8-ci

on:
  push:
    branches: [ "main", "feature/*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0    
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.x'        
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.7
      with:
        useConfigFile: true
        configFilePath: ./.github/GitVersion.yml
        updateAssembyInfo: true
    - name: Display SemVer
      run: |
        echo "SemVer: $GITVERSION_SEMVER"        
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 3.1.x
    - name: Restore dependencies
      run: dotnet restore ./src/Helpm8.sln
    - name: Build
      run: |
        dotnet build ./src/Helpm8.sln --no-restore --configuration Release /p:Version=${{ 
          steps.gitversion.outputs.AssemblySemVer }} /p:AssemblyVersion=${{
          steps.gitversion.outputs.AssemblySemVer }} /p:InformationalVersion=${{
          steps.gitversion.outputs.InformationalVersion }} 
    - name: Test
      run: | 
        dotnet test ./src/Helpm8.sln --no-build --verbosity normal --configuration Release --logger trx --results-directory "TestResults" /p:Version=${{
          steps.gitversion.outputs.AssemblySemVer }}
    - name: Upload dotnet test results
      uses: actions/upload-artifact@v3
      with:
        name: dotnet-results
        path: TestResults
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}      
    - name: Package nuget
      run: dotnet pack ./src/Helpm8.sln --no-build --configuration Release -o:package /p:PackageVersion=${{ steps.gitversion.outputs.NuGetVersion }}
    - name: Push nuget to GitHub
      run: dotnet nuget push ./package/*.nupkg --source https://nuget.pkg.github.com/wiesenwischer/index.json --api-key ${{ secrets.GITHUB_TOKEN }}

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      id: test-results
      if: always()
      with:
        files: "TestResults/**/*.trx"
    - name: Set badge color
      shell: bash
      run: |
        case ${{ fromJSON( steps.test-results.outputs.json ).conclusion }} in
          success)
            echo "BADGE_COLOR=31c653" >> $GITHUB_ENV
            ;;
          failure)
            echo "BADGE_COLOR=800000" >> $GITHUB_ENV
            ;;
          neutral)
            echo "BADGE_COLOR=696969" >> $GITHUB_ENV
            ;;
        esac
    - name: Create badge
      uses: emibcn/badge-action@d6f51ff11b5c3382b3b88689ae2d6db22d9737d1
      with:
        label: Tests
        status: '${{ fromJSON( steps.test-results.outputs.json ).formatted.stats.tests }} tests, ${{ fromJSON( steps.test-results.outputs.json ).formatted.stats.runs }} runs: ${{ fromJSON( steps.test-results.outputs.json ).conclusion }}'
        color: ${{ env.BADGE_COLOR }}
        path: badge.svg
    - name: Upload badge to Gist
      # Upload only for feature-gitversion branch
      if: >
        github.event_name == 'workflow_run' && github.event.workflow_run.head_branch == 'feature-gitversion' ||
        github.event_name != 'workflow_run' && github.ref == 'refs/heads/feature-gitversion'
      uses: andymckay/append-gist-action@1fbfbbce708a39bd45846f0955ed5521f2099c6d
      with:
        token: ${{ secrets.GIST_TOKEN }}
        gistURL: https://gist.github.com/Wiesenwischer/a859f5667581cce2300fc8e89ac98444
        file: badge.svgv

